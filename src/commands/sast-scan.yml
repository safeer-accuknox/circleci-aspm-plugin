description: >
  Accuknox SAST Scan
parameters:
  INPUT_SOFT_FAIL:
    description: "Do not return an error code if there are failed checks"
    default: true
    type: boolean
  SKIP_SONAR_SCAN:
    description: "Peform Sonarqube scan"
    default: false
    type: boolean
  REPOSITORY_URL:
    description: "The URL of repository."
    default: ""
    type: string
  REPOSITORY_COMMIT_ID:
    description: "The SHA1 hash of the last commit of the current build."
    default: ""
    type: string
  REPOSITORY_BRANCH:
    description: "The name of the Git branch currently being built."
    default: ""
    type: string
steps:
  - run:
      name: Validation
      environment:
        REPOSITORY_BRANCH: <<parameters.REPOSITORY_BRANCH>>
        REPOSITORY_COMMIT_ID: <<parameters.REPOSITORY_COMMIT_ID>>
        REPOSITORY_URL: <<parameters.REPOSITORY_URL>>
      command: |
        if [[ -z "$ACCUKNOX_ENDPOINT" || -z "$ACCUKNOX_TENANT" || -z "$ACCUKNOX_LABEL" || -z "$ACCUKNOX_TOKEN" || -z "$SONAR_HOST_URL" || -z "$SONAR_PROJECT_KEY" || -z "$SONAR_TOKEN" ]]; then
          echo "Error: One or more required environment variables are empty."
          echo "Please set ACCUKNOX_ENDPOINT, ACCUKNOX_TENANT, ACCUKNOX_LABEL, and ACCUKNOX_TOKEN."
          echo "Please set SONAR_HOST_URL, SONAR_PROJECT_KEY, and SONAR_TOKEN."
          exit 1
        else
          echo "All required environment variables are set."
        fi

        REPOSITORY_BRANCH="${REPOSITORY_BRANCH:-$CIRCLE_BRANCH}"
        REPOSITORY_COMMIT_ID="${REPOSITORY_COMMIT_ID:-$CIRCLE_SHA1}"
        REPOSITORY_URL="${REPOSITORY_URL:-$CIRCLE_REPOSITORY_URL}"
        
        if [[ -z "$REPOSITORY_URL" ]]; then
          echo "The URL of the repository is empty, please set REPOSITORY_URL input"
          exit 1
        fi

        echo "export REPOSITORY_URL=$REPOSITORY_URL" >> $BASH_ENV
        echo "export REPOSITORY_COMMIT_ID=$REPOSITORY_COMMIT_ID" >> $BASH_ENV
        echo "export REPOSITORY_BRANCH=$REPOSITORY_BRANCH" >> $BASH_ENV
  # Mount volume not working
  - run:
      name: Sonarqube Scan
      environment:
        GIT_DEPTH: "0"
        SKIP_SONAR_SCAN: <<parameters.SKIP_SONAR_SCAN>>
        INPUT_SOFT_FAIL: <<parameters.INPUT_SOFT_FAIL>>
      command: |
        set +e  # Allow commands to fail without stopping the script
        SQ_EXIT_CODE=0

        ORG_OPTION=""
        if [ -n "$SONAR_ORGANIZATION_ID" ] && [ -n "$(echo "$SONAR_ORGANIZATION_ID" | tr -d ' ')" ]; then
            ORG_OPTION="-Dsonar.organization=$SONAR_ORGANIZATION_ID"
        fi

        if [ "$SKIP_SONAR_SCAN" = 0 ]; then
          echo "Starting SonarQube scan..."
          docker run --rm -ti -d --name sonarqube \
            -e GIT_DEPTH=${GIT_DEPTH}  \
            -e SONAR_HOST_URL=${SONAR_HOST_URL}  \
            -e SONAR_TOKEN=${SONAR_TOKEN} \
            -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=${SONAR_PROJECT_KEY} ${ORG_OPTION} -Dsonar.qualitygate.wait=true" \
            --entrypoint bash \
            sonarsource/sonar-scanner-cli
          docker cp . sonarqube:/usr/src 
          docker exec -ti sonarqube /usr/bin/entrypoint.sh
          SQ_EXIT_CODE=$(docker exec -ti sonarqube echo $?)
          docker stop sonarqube
        else
          echo "SonarQube scan is disabled."
        fi
        echo "export SQ_EXIT_CODE=$SQ_EXIT_CODE" >> $BASH_ENV
  # Mount volume not working
  - run:
      name: Accuknox SAST Scan
      command: |
        set +e  # Allow commands to fail without stopping the script

        AK_EXIT_CODE=0
        ORG_OPTION=""
        if [ -n "$SONAR_ORGANIZATION_ID" ] && [ -n "$(echo "$SONAR_ORGANIZATION_ID" | tr -d ' ')" ]; then
          ORG_OPTION="-e SQ_ORG=$SONAR_ORGANIZATION_ID"
        fi
        docker run  --rm -ti -d --name accuknoxsast $ORG_OPTION -e SQ_PROJECTS="${SONAR_PROJECT_KEY}" -e SQ_URL=${SONAR_HOST_URL} -e SQ_AUTH_TOKEN=${SONAR_TOKEN} -e REPORT_PATH=/app/data/ --entrypoint bash accuknox/sastjob:latest
        docker exec -ti accuknoxsast mkdir -p /app/data/
        docker exec -ti accuknoxsast python /app/sq-job.py
        AK_EXIT_CODE=$(docker exec -ti accuknoxsast echo $?)
        docker cp accuknoxsast:/app/data/ .
        docker stop accuknoxsast
        echo "export AK_EXIT_CODE=$AK_EXIT_CODE" >> $BASH_ENV
  - run:
      name: Uploading Results
      command: |
        for file in `ls -1 data/SQ-*.json`; do
          jq --arg branch "$REPOSITORY_BRANCH" --arg commit_id "$REPOSITORY_COMMIT_ID" --arg repo_url "$REPOSITORY_URL" \
          --arg build_url "$CIRCLE_BUILD_URL" \
          '.repo_details = { 
              "repository_url": $repo_url, 
              "commit": $commit_id, 
              "branch": $branch, 
              "pipeline_url": $build_url 
          }' "$file" > "$file.tmp" && mv "$file.tmp" "$file"

          curl --silent --show-error --fail --location --request POST "https://${ACCUKNOX_ENDPOINT}/api/v1/artifact/?tenant_id=${ACCUKNOX_TENANT}&data_type=SQ&label_id=${ACCUKNOX_LABEL}&save_to_s3=true" --header "Tenant-Id: ${ACCUKNOX_TENANT}" --header "Authorization: Bearer ${ACCUKNOX_TOKEN}" --form "file=@\"$file\""
        done
  - run:
      name: Failing Pipeline If Scan Failed
      environment:
        INPUT_SOFT_FAIL: <<parameters.INPUT_SOFT_FAIL>>
      command: |
          SQ_EXIT_CODE="${SQ_EXIT_CODE//[$'\t\r\n ']}"
          AK_EXIT_CODE="${AK_EXIT_CODE//[$'\t\r\n ']}"
          INPUT_SOFT_FAIL="${INPUT_SOFT_FAIL//[$'\t\r\n ']}"

          FINAL_EXIT_CODE=0
          if [ "$SQ_EXIT_CODE" -ne "0" ] || [ "$AK_EXIT_CODE" -ne "0" ]; then
            FINAL_EXIT_CODE=$SQ_EXIT_CODE
            if [ "$SQ_EXIT_CODE" -eq 0 ]; then
              FINAL_EXIT_CODE=$AK_EXIT_CODE
            fi
          fi

          
          echo "FINAL_EXIT_CODE = $FINAL_EXIT_CODE"
          if [ "$FINAL_EXIT_CODE" -ne 0 ]; then
            if [ "$INPUT_SOFT_FAIL" = 1 ]; then
              echo "Scan failed, but soft fail is enabled. Continuing..."
            else
              echo "Scan failed and soft fail is disabled. Exiting with failure."
              exit 1
            fi
          else
            echo "Scan completed successfully."
          fi