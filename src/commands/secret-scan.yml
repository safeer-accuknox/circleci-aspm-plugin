description: >
  Accuknox Secret Scan
parameters:
  RESULTS:
    description: 'Specifies which type(s) of results to output: verified, unknown, unverified, filtered_unverified. Defaults to all types.'
    default: ""
    type: string
  BRANCH:
    description: 'The branch to scan. Use all-branches to scan all branches.'
    default: ""
    type: string
  EXCLUDE_PATHS:
    description: "Paths to exclude from the scan."
    default: ""
    type: string
  ADDITIONAL_ARGUMENTS:
    description: "Extra parameters for secret scanning."
    default: ""
    type: string
  INPUT_SOFT_FAIL:
    description: "Do not return an error code if there are failed checks"
    default: true
    type: boolean
steps:
  - run:
      name: Validation
      command: |
        if [[ -z "$ACCUKNOX_ENDPOINT" || -z "$ACCUKNOX_TENANT" || -z "$ACCUKNOX_LABEL" || -z "$ACCUKNOX_TOKEN" ]]; then
          echo "Error: One or more required environment variables are empty."
          echo "Please set ACCUKNOX_ENDPOINT, ACCUKNOX_TENANT, ACCUKNOX_LABEL, and ACCUKNOX_TOKEN."
          exit 1
        else
          echo "All required environment variables are set."
        fi
  - run:
      name: Prerequisites
      command: |
        apk update
        apk add curl
  - run:
      name: Secret Scan
      environment:
        RESULTS: <<parameters.RESULTS>>
        BRANCH: <<parameters.BRANCH>>
        EXCLUDE_PATHS: <<parameters.EXCLUDE_PATHS>>
        ADDITIONAL_ARGUMENTS: <<parameters.ADDITIONAL_ARGUMENTS>>
        INPUT_SOFT_FAIL: <<parameters.INPUT_SOFT_FAIL>>
      command: |
        set +e  # Allow commands to fail without stopping the script
      
        # Set RESULTS_FLAG if provided
        if [[ -n "$RESULTS" ]]; then
          RESULTS_FLAG="--results $RESULTS"
        fi

        # Set EXCLUDE_FLAG if exclude-paths are provided
        if [[ -n "$EXCLUDE_PATHS" ]]; then
          EXCLUDE_FLAG="-x $EXCLUDE_PATHS"
        fi

        # Set EXTRA_ARGS if additional arguments are provided
        if [[ -n "$ARGS" ]]; then
          EXTRA_ARGS="$ARGS"
        fi

        # Determine the branch to scan
        if [[ "$BRANCH" == "all-branches" ]]; then
          BRANCH_FLAG=""
        elif [[ -n "$BRANCH" ]]; then
          BRANCH_FLAG="--branch=$BRANCH"
        else
          BRANCH_FLAG="--branch=$CIRCLE_SHA1"
        fi

        # Run TruffleHog
        echo trufflehog git file://$PWD --fail --json --no-update $BRANCH_FLAG $RESULTS_FLAG $FAIL_FLAG $EXCLUDE_FLAG $EXTRA_ARGS
        trufflehog git file://$PWD --fail --json --no-update $BRANCH_FLAG $RESULTS_FLAG $FAIL_FLAG $EXCLUDE_FLAG $EXTRA_ARGS > results.json

        # Output the TruffleHog exit code to an environment var
        TRUFFLEHOG_EXIT_CODE=$?
        echo "export TRUFFLEHOG_EXIT_CODE=$TRUFFLEHOG_EXIT_CODE" >> $BASH_ENV

        if [[ -f results.json ]]; then
          echo "TruffleHog scan completed. Results saved to results.json."
        else
          echo "No results generated by TruffleHog."
        fi
  - run:
      name: Uploading Results
      command: |
        if [[ ! -s results.json ]]; then
            echo "No secrets found. Skipping API upload."
            exit 0
        fi

        curl --silent --show-error --fail --location --request POST "https://${ACCUKNOX_ENDPOINT}/api/v1/artifact/?tenant_id=${ACCUKNOX_TENANT}&data_type=TruffleHog&label_id=${ACCUKNOX_LABEL}&save_to_s3=true" --header "Tenant-Id: ${ACCUKNOX_TENANT}" --header "Authorization: Bearer ${ACCUKNOX_TOKEN}" --form 'file=@"results.json"'
  - run:
      name: Failing Pipeline If Scan Failed
      environment:
        INPUT_SOFT_FAIL: <<parameters.INPUT_SOFT_FAIL>>
      command: |
        echo "TRUFFLEHOG_EXIT_CODE = $TRUFFLEHOG_EXIT_CODE"
        echo "INPUT_SOFT_FAIL = $INPUT_SOFT_FAIL"
        if [ "$TRUFFLEHOG_EXIT_CODE" -ne 0 ]; then
          if [ "$INPUT_SOFT_FAIL" -eq 1 ]; then
            echo "Scan failed, but soft fail is enabled. Continuing..."
          else
            echo "Scan failed and soft fail is disabled. Exiting with failure."
            exit 1
          fi
        else
          echo "Scan completed successfully. Continuing..."
        fi