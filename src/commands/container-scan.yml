description: >
  Accuknox Container Scan
parameters:
  DOCKERFILE:
    description: "The Dockerfile path relatively to build context."
    default: "Dockerfile"
    type: string
  BUILD_CONTEXT:
    description: "The context of the Dockerfile to use for building the image."
    default: "."
    type: string
  IMAGE_NAME:
    description: "Docker image name"
    type: string
  TAG:
    description: "Docker image tag name"
    default: ""
    type: string
  ADDITIONAL_ARGUMENTS:
    description: "Extra params for container scanning"
    default: ""
    type: string
  SEVERITY:
    description: "Allows selection of severity level for the scan. Options include UNKNOWN, LOW, MEDIUM, HIGH, CRITICAL. If specified, the scan will target vulnerabilities of the selected severity level."
    default: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
    type: string
  INPUT_SOFT_FAIL:
    description: "Do not return an error code if there are failed checks"
    default: true
    type: boolean
steps:
  - run:
      name: Validation
      command: |
        if [[ -z "$ACCUKNOX_ENDPOINT" || -z "$ACCUKNOX_TENANT" || -z "$ACCUKNOX_LABEL" || -z "$ACCUKNOX_TOKEN" ]]; then
          echo "Error: One or more required environment variables are empty."
          echo "Please set ACCUKNOX_ENDPOINT, ACCUKNOX_TENANT, ACCUKNOX_LABEL, and ACCUKNOX_TOKEN."
          exit 1
        else
          echo "All required environment variables are set."
        fi
  - run:
      name: Download Scanner
      command: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
  - run:
      name: Build Docker image
      environment:
        IMAGE_NAME: <<parameters.IMAGE_NAME>>
        TAG: <<parameters.TAG>>
        DOCKERFILE: <<parameters.DOCKERFILE>>
        BUILD_CONTEXT: <<parameters.BUILD_CONTEXT>>
      command: |
        if [ -z "$TAG" ]; then
          TAG=$CIRCLE_SHA1
        fi
        DOCKER_IMAGE=$IMAGE_NAME:$TAG
        docker buildx build -t $DOCKER_IMAGE -f $DOCKERFILE $BUILD_CONTEXT
        echo "export DOCKER_IMAGE=$DOCKER_IMAGE" >> $BASH_ENV
  - run:
      name: Scan Docker image
      environment:
        SEVERITY: <<parameters.SEVERITY>>
        ADDITIONAL_ARGUMENTS: <<parameters.ADDITIONAL_ARGUMENTS>>
      command: |
        set +e  # Allow commands to fail without stopping the script
        echo trivy image $ADDITIONAL_ARGUMENTS --exit-code 1 --severity $SEVERITY -f json $DOCKER_IMAGE -o results.json --quiet
        trivy image $ADDITIONAL_ARGUMENTS --exit-code 1 --severity $SEVERITY -f json $DOCKER_IMAGE -o results.json --quiet
        TRIVY_EXIT_CODE=$?
        echo "export TRIVY_EXIT_CODE=$TRIVY_EXIT_CODE" >> $BASH_ENV
  - run:
      name: Uploading Results
      command: |
        curl --silent --show-error --fail --location --request POST "https://${ACCUKNOX_ENDPOINT}/api/v1/artifact/?tenant_id=${ACCUKNOX_TENANT}&data_type=TR&label_id=${ACCUKNOX_LABEL}&save_to_s3=true" --header "Tenant-Id: ${ACCUKNOX_TENANT}" --header "Authorization: Bearer ${ACCUKNOX_TOKEN}" --form 'file=@"results.json"'
  - run:
      name: Failing Pipeline If Scan Failed
      environment:
        INPUT_SOFT_FAIL: <<parameters.INPUT_SOFT_FAIL>>
      command: |
        if [ "$TRIVY_EXIT_CODE" -ne 0 ] && [ "$INPUT_SOFT_FAIL" -ne 1  ]; then
          echo "Scan failed. Exiting with failure."
          exit 1
        fi